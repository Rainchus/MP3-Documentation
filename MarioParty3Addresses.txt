80000400 - Game Entry
800DF118 - Function call here decides minigame to play from index
80128DE4 - Minigame Index!
800D5546 - Player 1 Held Buttons (2nd)
800D5558 - Player 1 Button Press 1 Frame (2nd)
800CCF7C - Player 1 Buttons Held
800CCF7E - Player 2 Buttons Held
800CCF80 - Player 3 Buttons Held
800CCF82 - Player 4 Buttons Held
800C9520 - Player 1 Button Press 1 Frame
800C9522 - Player 2 Button Press 1 Frame
800C9524 - Player 3 Button Press 1 Frame
800C9526 - Player 4 Button Press 1 Frame
800D5AC0 - Character Bones?
8004B220 - Stores Button Press %ran once per frame ( jr ra at 8004B254 )
800DBD0C - Asm Code for Storing Player 1s Beginning Dice Roll
800D1108 - Player 1 Struct
800D1140 - Player 2 Struct
800D1178 - Player 3 Struct
800D11B0 - Player 4 Struct
800CDBD2 - Player 1 Forced Dice Roll Number
800CDC1E - Player 2 Forced Dice Roll Number
800CDC6A - Player 3 Forced Dice Roll Number
800CDCB6 - Player 4 Forced Dice Roll Number
800977C0 - 8009F700 Ascii characters/debug characters? %( Unused Font ) ROM: 983C0
800A76F8 - text that displays after winning/losing a minigame
800CD0AB - Wacky Watch Active (00 if not, 02 if active)
800E3470 - Wacky Watch Function
80102CB7 - Current Item Selection ID (when your hand is hovering over an item)
80102C58 - List of pointers to Item Functions (table below)
800CC167 - Show/Dont Show Minigame Explanations (00 = show, 01 = dont show)
800CC16A - Hide/Show COM Mini-Games (00 = show, 01 = dont show)
800CC157 - All/Easy Mini-Games (00 = All, 01 = Easy)
800CC169 - Player Walking Speed on Boards (00 = Fast, 01 = Normal, 02 = Slow, Unused 03 = Super Slow)
800CD06D - Actual Player Walking Speed on Boards
80105680 - Floats in this memory region control speed of things like messages and player walking speed on board
800CC168 - Message Speed (00 = Fast, 01 = Normal, 02 = Slow)
800CC166 - Save Type (00 = Every Turn, 01 = This Turn, 02 = Don't Save)
8011E1A2 - First toad shop textbox (uses a stringID, 3B-00)
8024B320 - string goes here before being print (on the stack)
800BDA6C - Text Box Width
800BDA6E - Text Box Height
8011E0A0 - Shop Items 1
80100F94 - Shop Item Cost
8010BC8C - Some Shop Code (JAL here is for getting playerplacement so the game knows what items to load into the shop)
8000D06C - Generate star sparkle effect
800FCA7C - Item Space Code?
800FCA7C - 800FF0F4 (Range of Item space code?)
800DBC2C - Dice roll code?
800DCFE4 - JAL to important dice roll code
800DCF24 - If A is pressed below dice block, run this code
8012E8BC - Player 4 X pos
8012E8C0 - Player 4 Y pos
8012E8C4 - Player 4 Z pos
800EE688 - Player Jump
800DCBCC - Break Dice Block
800F2388 - Player comes back down after jump code?
8010570E - ?
801057F0 - First Player Icon and Stats X pos
801057F4 - First Player Icon and Stats Y pos
8010585C - Second Player Icon and Stats X pos
80105860 - Second Player Icon and Stats Y pos
801058C8 - Third Player Icon and Stats X pos
801058CC - Third Player Icon and Stats Y pos
80105934 - Fourth Player Icon and Stats X pos
80105938 - Fourth Player Icon and Stats Y pos
80105708 - Dice Block Height
8011D9A0 - 8011FA70 All data for item bags
8010570F - Setting to 1 changes the dice block animation (it goes up and down)
800ED20C - Turn Player to face something? (a0 = FFFF a1 = speed to turn (usually 8))
80033128 - Generate Random Numbers for Dice Block (only graphical)
801D236E - Global Animation thing?
801C8F80 - List of pointers to player 1 bones?
8001BBEC - NOP 2 instructions here to stop the dice block from getting random numbers (graphically)
8004A0E0 - Start minigame?
800CDBD0 - Player 1 (2nd struct for p1)
800CDC1C - Player 2 (2nd struct for p2)
800CDC68 - Player 3 (2nd struct for p3)
800CDCB4 - Player 4 (2nd struct for p4)
800E44E4 - Get Item Descriptions function (takes arg a0, player index)
800F1EC8 - pause function
800F5D8C - Hide HUD?
80055024 - Dim screen? a0 = 04
800F1C94 - Load pause screen? a0 = scene to load?
800E21F4 - (func call at 800EF734)Remove Text from pause screen (Control Settings, and continue strings)
800E210C - print text??
80047898 -??
800AC4B7 - memory address of start menu text
80281F51
800364DC ??
A0350 - Debug Text Font (ROM Address)
8009FB50 - Start of debug text alphabet
8000E7B8 - Main Game Loop
800CD0AC - Shop to load (2 byte) (0000 - random, 0001 - toad, 0002 - Baby Bowser)
800EEF80 - GetRandOutOf100 (00-99)
8010C1EC - Item Bag hardcoded pointer in asm

Dice Roll Graphical Numbers RAM: 80187220
{
	0 = 9
	1 = 2
	2 = 4
	3 = 10
	4 = 3
	5 = 7
	6 = 5
	7 = 8
	8 = 6
	9 = 1
}


ROM: 1225490 Beginning of strings?

Some ROM free space?
0x909CC 	ROM
0x95A30 	ROM
0x1C3B6D0 	ROM
0x1C5063C	ROM

SpaceEnum
{
	0x00 Skip space?
	0x01 Blue space
	0x02 Red space
	0x03 Skip space?
	0x04 Happening space?
	0x05 Chance Time
	0x06 Item space
	0x07 Bank space
	0x08 Skip space?
	0x09 Battle Minigame
	0x0A Skip space?
	0x0B Skip space?
	0x0C Bowser space
	0x0D Skip space?
	0x0E Skip space?
	0x0F Game Guy
	0x10 Skip space?
}

PlayerStruct
{
0x00	u8
0x01	u8  CPU Difficulty
0x02	u8  Player Controller Number
0x03	u8  Character
0x04	u8  Flags? value & 1 == Player is CPU
0x0A	s16 Coin Count (i think s16 not u16)
0x0E	s8  Star Count
0x0F	u8  Current Chain Index
0x10	u8  Current Space Index
0x11	u8  Next Chain Index
0x12	u8  Next Space Index
0x13	u8  (Chain Index?)
0x14	u8  (Space Index?)
0x15	u8  (Chain Index?)
0x16	u8  (Space Index?)
0x17	u8  Flags
0x18	u8  Item 1
0x19	u8  Item 2
0x1A	u8  Item 3
0x1B 	u8  Bowser Suit Flags
0x1C 	u8  Color of Space Landed On
0x24	u32 OBJ Pointer (things like model data)
}

2ndPlayerStruct? length: 4C
{
0x00 	u8 Unknown
0x01 	u8 Unknown
0x02 	u8 ForceDiceRollNumber
0x03 	u8 
}


CharactersEnum
{
0x00 - Mario
0x01 - Luigi
0x02 - Peach
0x03 - Yoshi
0x04 - Wario
0x05 - DK
0x06 - Waluigi
0x07 - Daisy
}

ItemEnum
{
0x00 - Mushroom
0x01 - Skeleton Key
0x02 - Poison Mushroom
0x03 - Reverse Mushroom
0x04 - Cellular Shopper
0x05 - Warp Block
0x06 - Plunder Chest
0x07 - Bowser Phone
0x08 - Dueling Glove
0x09 - Lucky Lamp
0x0A - Golden Mushroom
0x0B - Boo Bell
0x0C - Boo Repellant
0x0D - Bowser Suit
0x0E - Magic Lamp
0x0F - Koopa Kard
0x10 - Barter Box
0x11 - Lucky Charm
0x12 - Wacky Watch
}

HiddenItemBlockChances 
RAM: 80101E70
ROM: 115A90
{
	0x48 (0 - 71 = Skeleton Key) 72%
	0x50 (72 - 79 = Magic Lamp) 8%
	0x55 (80 - 84 = Koopa Kard) 5%
	0x5A (85 - 89 = Wacky Watch) 5%
	0x5F (90 - 94 = Lucky Charm) 5%
	0x64 (95 - 99 = Barter Box) 5%
}


BowserEventFunctions
RAM: 801093EC
ROM: 3C620C
{
	8010778C - Coins for Bowser
	801078CC - Bowser's Coin Potluck
	80107A9C - Bowser Suit Giveaway
	80107DDC - Bowser Phone Giveaway
	801085E4 - Bowser's Curse
	80108664 - Reverse Curse
	801086E4 - Bowser Shuffle
	80108A2C - Bowser Revolution
	80108BB0 - Bowser ran away!
	80108BB0 - Bowser ran away!
}


ItemFunctions 80102C58
{
	8010DE7C - Boo (Using Boo)
	8010F2FC - Magic Lamp
	8010F730 - Warp Block
	80117C60 - Plunder Chest
	8011093C - Bowser Suit Transformation
	80110BC8 - Untransform from bowser suit
	8010FC24 - Mushroom/Golden Mushroom/Bowser Suit
	80110194 - Dueling Glove/Boo Bell
	801104E0 - Poison Mushroom/Reverse Mushroom/Boo Repellant/Koopa Kard
	8010F6C4 - At Star Space (if used as item, softlocks/crashes after if you say yes)
	80116F5C - Places Poison Shroom on Opponent
	801177DC - Places Reverse Shroom on Opponent
	80116DAC - ?
	801176A4 - ?
	80111018 - Celluar Shopper
	801112D8 - Bowser Phone
	80111678 - Lucky Lamp
	80112074 - Skeleton Key Throw Away
	80112BCC - ?
	801138E4 - Barter Box
	80114B80 - Lucky Charm
	80115B80 - Wacky Watch

Begins at 31D950 in ROM

80107DE0 : LUI a1, 0x8011
80107DE4 : ADDIU a1, a1, 0xDE7C %load Boo function pointer

80107DF0 : LUI a1, 0x8011
80107DF4 : ADDIU a1, a1, 0xF2FC %load magic lamp function pointer

80107E00 : LUI a1, 0x8011
80107E04 : ADDIU a1, a1, 0xF6C4 %load star space "item" function pointer

80107E10 : LUI a1, 0x8011
80107E14 : ADDIU a1, a1, 0xF730 %load warp block function pointer

80107E20 : LUI a1, 0x8011
80107E24 : ADDIU a1, a1, 0x7C60 %load plunder chest function pointer

80107E30 : LUI a1, 0x8011
80107E34 : ADDIU a1, a1, 0x093C %Bowser Suit Transformation function pointer

80107E40 : LUI a1, 0x8011
80107E44 : ADDIU a1, a1, 0x0BC8 %Crash?

80107E50 : LUI a1, 0x8011
80107E54 : ADDIU a1, a1, 0xFC24 %load Mushroom/Golden Mushroom/Bowser Suit function pointer

80107E60 : LUI a1, 0x8011
80107E64 : ADDIU a1, a1, 0x0194 %load Dueling Glove/Boo Bell function pointer

80107E70 : LUI a1, 0x8011
80107E74 : ADDIU a1, a1, 0x04E0 %load Poison Mushroom/Reverse Mushroom/Boo Repellant/Koopa Kard function pointer

80107E80 : LUI a1, 0x8011
80107E84 : ADDIU a1, a1, 0x6F5C %load placing poison shroom on opponent function pointer

80107E90 : LUI a1, 0x8011
80107E94 : ADDIU a1, a1, 0x77DC %load "Places Reverse Shroom on opponent" function pointer

80107EA0 : LUI a1, 0x8011
80107EA4 : ADDIU a1, a1, 0x1018 %load cellular shopper function pointer

80107EB0 : LUI a1, 0x8011
80107EB4 : ADDIU a1, a1, 0x12D8 %load bowser phone function pointer

80107EC0 : LUI a1, 0x8011
80107EC4 : ADDIU a1, a1, 0x1678 %load lucky lamp function pointer

80107ED0 : LUI a1, 0x8011
80107ED4 : ADDIU a1, a1, 0x2074 %load skeleton key throwaway function pointer

80107EE0 : LUI a1, 0x8011
80107EE4 : ADDIU a1, a1, 0x2BCC %? load function pointer

80107EF0 : LUI a1, 0x8011
80107EF4 : ADDIU a1, a1, 0x38E4 %load barter box function pointer

80107F00 : LUI a1, 0x8011
80107F04 : ADDIU a1, a1, 0x4B80 %load lucky charm function pointer

80107F10 : LUI a1, 0x8011
80107F14 : ADDIU a1, a1, 0x5B80 %load wacky watch function pointer

80107F20 : LUI a1, 0x8011
80107F24 : ADDIU a1, a1, 0x6DAC %? load function pointer

80107F30 : LUI a1, 0x8011
80107F34 : ADDIU a1, a1, 0x76A4 %? load function pointer
}


ItemBagItems
RAM: 8011E164
ROM: 333CD4
{
	0x00 - Mushroom
	0x01 - Skeleton Key
	0x04 - Cellular Shopper
	0x05 - Warp Block
	0x08 - Dueling Glove
	0x0A - Golden Mushroom
	0x0C - Boo Repellant
	0x0E - Magic Lamp
	0x0F - Koopa Kard
	0x10 - Barter Box

8010C22C : LUI v0, 0x8012
8010C230 : ADDIU v0, v0, 0xE164 %load address of item chances
}


BabyBowserItemBagItems
RAM: 8011E16E
ROM: 333CDE
{
	0x01 - Skeleton Key
	0x02 - Poison Mushroom
	0x03 - Reverse Mushroom
	0x06 - Plunder Chest
	0x07 - Bowser Phone
	0x09 - Lucky Lamp
	0x0B - Boo Bell
	0x0D - Bowser Suit
	0x11 - Lucky Charm
}


ItemBagChances (Variant 1?)
RAM: 8011E100
ROM: 333C70
{
	0x19 (0 - 24 = Mushroom) 25%
	0x37 (25 - 54 = Skeleton Key) 30%
	0x41 (55 - 64 = Cellular Shopper) 10%
	0x4C (65 - 75 = Warp Block) 11%
	0x51 (76 - 80 = Dueling Glove) 5%
	0x56 (81 - 85 = Golden Mushroom) 5%
	0x5B (86 - 90 = Boo Repellant) 5%
	0x60 (91 - 95 = Magic Lamp) 5%
	0x62 (96 - 97 = Koopa Kard) 2%
	0x64 (98 - 99 = Barter Box) 2%
}


BabyBowserItemBagChances (Variant 1?)
RAM: 8011E132
ROM: 333CA2
{
	0x21 (0 - 32 = Skeleton Key) 33%
	0x35 (33 - 52 = Poison Mushroom ) 20%
	0x44 (53 - 67 = Reverse Mushroom) 15%
	0x49 (68 - 72 = Plunder Chest) 5%
	0x4E (73 - 77 = Bowser Phone) 5%
	0x53 (78 - 82 = Lucky Lamp) 5%
	0x5D (83 - 92 = Bowser Suit) 10%
	0x62 (93 - 97 = Boo Bell) 5%
	0x64 (98 - 99 = Lucky Charm) 2%
}


Shop Items Cost
RAM: 80100F94
ROM: 114BB4
{
	0x05 - Mushroom
	0x05 - Skeleton Key
	0x05 - Poison Mushroom
	0x05 - Reverse Mushroom
	0x05 - Cellular Shopper
	0x05 - Warp Block
	0x0A - Plunder Chest
	0x0A - Bowser Phone
	0x0A - Dueling Glove
	0x0A - Lucky Lamp
	0x0A - Golden Mushroom
	0x0F - Boo Bell
	0x0A - Boo Repellant
	0x0A - Bowser Suit
	0x14 - Magic Lamp
	0xFF - 
	0xFF - 
	0xFF - 
	0xFF - 
	0x1E - Item Bag

}

8012EC78 - Message Struct??
{
	0x00 Bool? u32
	0x04 RGBA5551 for text (Item purchase colors)
	0x06 RGBA5551 for text again? (Baby Bowser's Joint color)
	0x08 - ?
	0x0C

}



StringIDs
{
	01-00 "The ice looks like it might crack\nif another player stops on it."
	01-01 "You were surprsied by the cracking ice\nand ran away to the edge of the lake."

	02-00 "The Snowman didn't wake up."
	02-01 "Zzz...Hmm?\nWhat! I'm sleepin' here!\nYou want me to roll a snowball?"
	02-02 "OK, OK.\nThere! Are you happy?"
	02-03 "What?\nThen just let me sleep!\nI'm beat and...zzz...."
	02-04 "If you don't have any\ncoins, I've got nothin' to say.\nG'night...zzz...zzz."

	03-00 "Ouch! Bad luck.\nYou slipped and fell down."
	03-01 
}